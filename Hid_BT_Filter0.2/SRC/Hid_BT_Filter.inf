;
; Hid_BT_Filter.inf
;

[Version]
Signature="$WINDOWS NT$"
Class = HIDClass
ClassGuid = {745a17a0-74d3-11d0-b6fe-00a0c90f57da}
Provider=%ManufacturerName%
CatalogFile=Hid_BT_Filter.cat
DriverVer=07/17/2023,1.0.0.1
PnpLockdown=1

[DestinationDirs]
DefaultDestDir = 13

[ControlFlags]
; We don't want our device to be installable via the non-PnP hardware dialogs
ExcludeFromSelect = *

[SourceDisksNames]
1 = %DiskName%,,,""

[SourceDisksFiles]
Hid_BT_Filter.sys  = 1,,

;*****************************************
; Install Section
;*****************************************

[Manufacturer]
%ManufacturerName%=Standard,NT$ARCH$.10.0

[Standard.NT$ARCH$.10.0]
; Driver migration: if this user installed the old Precision Touch Driver, install the generic HID USB driver for them
%Hid_BT_Filter_RootDevice.DeviceDesc%=StandardUsbHid_Device, USB\VID_17EF&PID_60F6&MI_01

; The fact is, you can't filter HIDUSB or friends directly, because they load the export driver called
; HIDCLASS which overrides their IO Major Function pointers. Therefore we still implement our own HID miniport 
; transport, but in fact reusing the underlying HID transport (either Bluetooth or USB).
; Some high-level patches involved to modify the underlying driver IO handlers.


;%Hid_BT_Filter.DeviceDesc%=Hid_BT_Filter_MiniPortDevice, BTHLEDevice\{00001812-0000-1000-8000-00805f9b34fb}_Dev_VID&0217ef_PID&60f6_REV&0008


%Hid_BT_Filter.DeviceDesc%=Hid_BT_Filter_MiniPortDevice, HID\VID_17EF&UP:000D_U:0005
%Hid_BT_Filter.DeviceDesc%=Hid_BT_Filter_MiniPortDevice, HID\VID_048D&UP:000D_U:0005


; To avoid confusions to OS, disable any other collections.
;%Hid_BT_Filter.NullDeviceDesc%=Hid_BT_Filter_NullDevice, HID\VID_17EF&PID_60F6&MI_01&Col02
;%Hid_BT_Filter.NullDeviceDesc%=Hid_BT_Filter_NullDevice, HID\VID_17EF&PID_60F6&MI_01&Col03
;%Hid_BT_Filter.NullDeviceDesc%=Hid_BT_Filter_NullDevice, HID\{00001812-0000-1000-8000-00805f9b34fb}_Dev_VID&0217ef_PID&60f6&Col02;;

[FilterDriver_Payload]
Hid_BT_Filter.sys

[StandardUsbHid_Device.NT]
Include = input.inf
Needs = HID_Inst.NT

[StandardUsbHid_Device.NT.HW]
Include = input.inf
Needs = HID_Inst.NT.HW

[StandardUsbHid_Device.NT.Services]
Include = input.inf
Needs = HID_Inst.NT.Services

[Hid_BT_Filter_MiniPortDevice.NT]
CopyFiles=FilterDriver_Payload

[Hid_BT_Filter_NullDevice]
; Nothing!

[Hid_BT_Filter_NullDevice.Services]
AddService = ,2    ; no value for the service name

;-------------- Service installation
[Hid_BT_Filter_MiniPortDevice.NT.Services]
AddService = Hid_BT_Filter,, Hid_BT_Filter_Service_Inst
AddService = mshidkmdf, %SPSVCINST_ASSOCSERVICE%, mshidkmdf_Service_Inst

[Hid_BT_Filter_MiniPortDevice.NT.HW]
AddReg=Hid_BT_Filter_AddReg

[Hid_BT_Filter_AddReg]
HKR,,FriendlyName,,%Hid_BT_Filter.DeviceDesc%
HKR,,"LowerFilters",0x00010008,"Hid_BT_Filter"

[Hid_BT_Filter_MiniPortDevice.NT.Wdf]
KmdfService = Hid_BT_Filter, Hid_BT_Filter_wdfsect

; -------------- Microsoft HID KMDF driver install sections
[mshidkmdf_Service_Inst]
ServiceType    = 1                  ; SERVICE_KERNEL_DRIVER
StartType      = 3                  ; SERVICE_DEMAND_START
ErrorControl   = 1                  ; SERVICE_ERROR_NORMAL
ServiceBinary  = %10%\System32\Drivers\mshidkmdf.sys

; -------------- Hid_BT_Filter driver install sections
[Hid_BT_Filter_Service_Inst]
DisplayName    = %Hid_BT_Filter.SVCDESC%
ServiceType    = 1               ; SERVICE_KERNEL_DRIVER
StartType      = 3               ; SERVICE_DEMAND_START
ErrorControl   = 1               ; SERVICE_ERROR_NORMAL
ServiceBinary  = %13%\Hid_BT_Filter.sys

[Hid_BT_Filter_wdfsect]
KmdfLibraryVersion = $KMDFVERSION$

[Strings]
SPSVCINST_ASSOCSERVICE= 0x00000002
ManufacturerName = "jxleyo.HRP"
DiskName = "HID BlueTooth Filter Installation Disk"
Hid_BT_Filter_RootDevice.DeviceDesc = "HID BlueTooth Device"
Hid_BT_Filter.DeviceDesc = "HID BlueTooth Filter"
Hid_BT_Filter.NullDeviceDesc = "HID BlueTooth Filter Services"
Hid_BT_Filter.SVCDESC = "HID BlueTooth Filter Service"
